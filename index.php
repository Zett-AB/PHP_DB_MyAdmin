<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MySQL и PHPMYADMIN</title>
    <link rel="stylesheet" type="text/css" href="style.css">
    <link rel="stylesheet" type="text/css" href="normalize.css">
</head>
<body>
    <main>
        <header>
            <h1>MySQL и PHPMYADMIN.<br> 
                Начало работы</h1>
                <h4 class="hello">Знакомимся с системой администрирования <b>PHPMyAdmin</b> и создадим sql-таблицу для сайта</h4>
                    <?php
                        $nickname="Александр!";
                        $hello="Привет, ";
                        $offer="Продолжаем изучение кода PHP. <br> 
                                В данном параграфе рассмотрим работу с базой данных(БД) в MySQL с панелью управлени PHPMyAdmin.";
                        echo "<h2 class='nicname'>".$hello.$nickname."<br>"."<br>".$offer."</h2>";
                    ?>
        </header>
        <section class="concepts">
            <h3>Общие понятия и определения.</h3>
            <h4 class="first_h"><b>Что такое - phpMyAdmin.</b></h4>
            <p>                
                phpMyAdmin - это программа написанная на PHP, которая предгазначена для управления сервером MySQL.<br>
                PhpMyAdmin поддерживает широкий набор операция над MySQL. <br>
                Часто используемые команды поддерживаются через пользовательский интерфейс-панель управления/администрирования(такие как - управление базами данных, таблицами, полями, связями, индексами, правами, пользователями и многие другие).<br>
                Одновременно напрямую можно выполнить любой SQL-запрос.   
            </p>
            <h4 class="first_h">Некоторые возможности phpMyAdmin</h4>
            <p>
                <ul>
                    <li>интуитивно понятный веб-интерфейс</li>
                    <li>поддержка большинства функций MySQL:
                        <ul>
                            <li>просмотр и удаление баз данных, таблиц, вьюшек, полей и индексов</li>
                            <li>создание, копирование, удаление, переименование и изменение баз данных, таблиц, полей и индексов</li>
                            <li>управление сервером, базами данных и таблицами, с советами по настройке сервера</li>
                            <li>выполнение, редакция и сохранение любого SQL-выражения, включая пакетные запросы</li>
                            <li>управление пользователями MySQL и их привилегиями</li>
                            <li>работа с хранимыми процедурами и триггерами</li>
                        </ul>
                    </li>
                    <li>поддержка импорта данных из CSV и SQL</li>
                    <li>поддержка экспорта в различные форматы CSV, SQL, XML, PDF, ISO/IEC 26300 - OpenDocument текст и таблицы, Word, Excel, LATEX и другие</li>
                    <li>администрирование нескольких серверов</li>
                    <li>генерирование наглядных схем баз данных в виде PDF</li>
                    <li>создание комплексных запросов с помощью функции Запрос по шаблону</li>
                    <li>глобальный или частичный поиск в базе данных</li>
                    <li>трансформация данных в любой формат, используя набор предназначенных функций вроде отображения BLOB-данных в виде картинки или ссылки для скачивания</li>
                </ul>
                это не все, лишь часть возможностей phpMyAdmin которых, впрочем, достаточно чтобы объяснить его международную популярнсть.
            </p>
        </section>
        <section class="start_com">
            <h3>Краткое описание для начинающих</h3>
            <h4>Что такое SQL?</h4>
            <p>
                SQL (англ. Structured Query Language - язык структурированных запросов) - универсальный язык, применяемый для создания, модификации и управления данными в реляционных базах данных.<br> 
                Этот язык был разработан IBM (экспериментальная СУБД "System R") в 1974-1979 годах. Первый стандарт языка SQL был принят Американским национальным институтом стандартизации (ANSI) в 1987 (так называемый SQL level 1) и несколько уточнён в 1989 году (SQL level 2), 1992 и 1999 году.<br>
                После этого, индустрия начала широко использовать SQL как язык реляционных баз данных, и на сегодняшний день практически каждая база данных основана на SQL.
            </p>
            <p>
                Архитектура данных, к которой обращается SQL называется <b>реляционной</b>.<br>
                В реляционных <b>базах данных</b> все данные представлены в виде простых таблиц, разбитых на строки и столбцы, на пересечении которых расположены данные. <br>
                Запросы к таким таблицам возвращают таблицы, которые сами могут становиться предметом дальнейших запросов.<br> 
                Каждая <b>база данных</b> может включать несколько таблиц, которые, как правило, связаны друг с другом, откуда и произошло название реляционные.
            </p>
            <p>
                В нашем случаи используем MySQL, популярную открытую реализацию SQL, которая предоставляется абсолютным большинством хостинг-провайдеров.
            </p>
            <h4>Инструментарий</h4>
            <p>
                Для выполнения упражнений, приведенных ниже, потребуется доступ к MySQL-серверу.<br>
                В качестве интерфейса для MySQL используется phpMyAdmin - PHP приложение, запущенное на Web-сервере. 
            </p>
            <p>
                В качестве сервера можно использовать различные программы. В данном случаи используем XAMPP, но можно использовать и другие - OpenService, MAMP, LAMP.
            </p>
            <p>
                Познакомимся с основами синтаксиса SQL, будем вводить выражения. <br>
                Также увидим, как phpMyAdmin генерирует MySQL-запросы на основе наших действий через интерфейс.
            </p>
        </section>
        <section class="study_step_first">
            <h3>Создание таблиц в phpMyAdmin</h3>
            <p>
                В качестве примера, будем использовать географическую информационную систему.<br> 
                Нам необходима информация о городах и странах - таким образом, нам понадобятся две таблицы, которые будут частью базы данных `geodb`. <br>
                Для создания таблиц можно использовать вкладку "Structure" на странице просмотра базы данных, или использовать блок SQL-запросов для ввода соответствующего выражения.
            </p>
            <p>
                Чтобы создать таблицу, воспользуемся выражением CREATE TABLE, в котором зададим имя нашей новой таблицы. <br>
                Выражение начинается с CREATE TABLE, после которой следует имя таблицы.<br>
                Затем в скобках указывается список столбцов, и информация о ключах.<br>
                Каждому столбцу дается имя, указывается тип данных, указывается атрибут NULL или NOT NULL (здесь, NOT NULL означает, что колонка не может иметь значение NULL), и значение по умолчанию, если оно уместно.
            </p>
            <p>
                Пример:<br>
                CREATE TABLE cities ( id int(11) NOT NULL auto_increment, city_name varchar(50) NOT NULL default '', latitude varchar(15) NOT NULL default '', longitude varchar(15) NOT NULL default '', population int(11) NOT NULL default '0', country_code char(2) NOT NULL default '', PRIMARY KEY (id) ) TYPE=MyISAM AUTO_INCREMENT=1 ;
            </p>
            <p>
                Столбец id - это первичный ключ (primary key), колонка, которая уникально идентифицирует каждый город.<br>
                Тип данных этого столбца - INT (целое число нормального размера), MySQL назначает уникальные значения для этого столбца, благодаря атрибуту auto_increment.<br>
                Обратите внимание на то, что мы не можем использовать название городов в качестве первичного ключа, т.к. некоторые имена городов не уникальны в мире.<br>
                Для отображения численности населения мы также используем целое число.
            </p>
            <p>
                Другие столбцы используют в качестве типов данных строки фиксированной длины (CHAR) либо строки переменной длины (VARCHAR). Когда мы точно знаем длину строки, лучше использовать CHAR, задавая длину столбца как CHAR(2). В противном случае, мы используем в качестве типа данных строки переменной длины, указывая только максимальную длину строки, например: VARCHAR(15).                
            </p>
            <p>
                После списка столбцов, мы можем указать дополнительные параметры таблицы, например, её тип, первое значение для столбца автоинкремента. SQL-выражение заканчивается точкой с запятой. Создав таблицу для городов, мы делаем ту же операцию, но на этот раз для таблицы стран.
            </p>
            <p>
                Пример:<br>
                CREATE TABLE countries ( country_code char(2) NOT NULL default '', country_name varchar(100) NOT NULL default '' ) TYPE=MyISAM;
            </p>
            <p>
                Заметьте, что столбец `country_code` присутствует в обеих таблицах. Это отражает принцип связи: country_code в `cities` связан с одноименным столбцом в таблице `countries`. Таким образом, мы экономим на месте, указывая название страны в базе данных только однажды.
            </p>
            <p>
                В другой статье (Migrating to InnoDB) техника связывания рассматривается более подробно.<br>
                После того как таблицы созданы, следует ввести в них какие-нибудь данные.<br>
                
            </p>
            <h4>Изменение табличных данных с помощью phpMyAdmin.</h4>
            <p>
                В данном разделе мы изучим базовый синтаксис выражений INSERT, UPDATE, DELETE, и SELECT.
            </p>
            <h5><b>Добавление данных с помощью INSERT</b></h5>
            <p>
                Для начала изучим выражение INSERT, на примере кода, который генерирует phpMyAdmin при выполнении операции INSERT. Для этого открываем вкладку Insert на странице просмотра таблицы `countries`, и вводим данные о стране:
            </p>
            <p>
                После того как мы кликаем на Go, данные записываются в таблицу и phpMyAdmin показывает нам использованное выражение INSERT:
            </p>
            <p>INSERT INTO `countries` (`country_code` , `country_name` ) VALUES ('ca', 'Canada');</p>
            <p>
                После части INSERT INTO, следует имя таблицы.<br>
                В MySQL, мы можем заключать имена таблиц и имена столбцов в обратные галочки "`", если в именах используются спецсимволы, зарезервированные слова. Затем мы открываем первую скобку, перечисляем столбцы в которые будет осуществлена вставка, разделяя их друг от друга запятыми.<br>
                После перечисления списка названий столбцов скобка закрывается и указывается зарезервированное слово VALUES, после которого в скобках перечисляются значения которые нужно вставить в таблицу, причем перечисляются в том же порядке, что и названия столбцов. Если значения имеют символьный тип данных, необходимо заключать их в кавычки.                
            </p>
            <p>Давайте занесем в таблицу `cities` данные города:</p>
            <p>
                INSERT INTO `cities` ( `id` , `city_name` , `latitude` , `longitude` , `population`, `country_code` ) VALUES ('', 'Sherbrooke', '45 23 59.00', '-71 46 11.00', 125000, 'ca');
            </p>
            <p>
                Здесь, мы указываем пустое значение для id, потому что атрибут автоинкремента данного столбца обеспечивает автоматическое выставление уникального значения. Также следует обратить внимание, что значение `population` - числовое, поэтому не заключено в кавычки.
            </p>
            <p>
                Давайте закончим этот раздел вставкой некоторых данных для нескольких других стран и городов, которые понадобятся нам позже.                
            </p>
            <p>
                INSERT INTO `countries` ( `country_code` , `country_name` ) VALUES ('zh', 'China'); INSERT INTO `cities` ( `id` , `city_name` , `latitude` , `longitude` , `population` , `country_code` ) VALUES ('', 'Shanghai', '31 13 58.00', '121 26 59.99', 11000000, 'zh');
            </p>
            <h5><b>Обновление данных с помощью UPDATE</b></h5>
            <p>
                Сначала кликните на `Browse` для таблицы `cities` в результате будет выведена пока единственная запись. Кликая по иконке в виде карандаша на бумаге (или ссылке Edit), мы переходим на панель редактирования данной строки. Изменим значение столбца `population` на 130000. После щелчка на `Save`, phpMyAdmin отображает следующее выражение:
            </p>
            <p>UPDATE `cities` SET `population` = '130000' WHERE `id` = '1' LIMIT 1 ;</p>
            <p>
                Ключевое слово в данном выражении - `UPDATE`, за которым следует название таблицы. Слово `SET` предваряет список модификаций (в нашем случае - только для столбца `population`) который записывается в формате "столбец = новое значение".
            </p>
            <p>
                Мы видим, что в выражении присутствует условие: WHERE `id` = '1', в котором используется первичный ключ, чтобы ограничить изменение значения столбца `population` только данной строкой, т.е. только для данного города.
            </p>
            <p>
                Часть limit 1 добавляется phpMyAdmin-ом и является гарантией, что если первичный ключ не задан, изменения не будут применены более чем к одной записи. За один запрос `UPDATE` могут быть изменены значения сразу нескольких столбцов:
            </p>
            <p>
                UPDATE `cities` SET `city_name` = 'Sherbrooke, Quebec', `population` = '130001' WHERE `id` = '1' LIMIT 1 ;
            </p>
            <h5><b>Удаление данных с помощью DELETE</b></h5>
            <p>
                В режиме `Browse` (просмотр) таблицы `cities`, кликните по красной иконке корзины (или ссылке Delete) - будет сгенерирован запрос, запрашивающий подтверждение выполнения следующего выражения: DELETE FROM `cities` WHERE `id` = '1' LIMIT 1 ;
            </p>
            <p>
                Синтаксис здесь очень прост, и включает только название таблицы, и условие при котором будет выполнена операция удаления. Исключение условия WHERE из запросов UPDATE или DELETE вполне допустимо в SQL, но в таком случае действие выражения будет применено к каждой записи таблицы!
            </p>
            <h5><b>Выборка данных с помощью SELECT</b></h5>
            <p>
                Извлечение информации из таблиц - вероятно наиболее часто используемый вид запроса. Например, запросы SELECT позволяют получить ответы на подобные вопросы: "какие города имеют численность населения большую, чем данное число?". Фактически, мы уже предварительно использовали SELECT, когда кликали на ссылку Browse для таблицы `cities`. Это сгенерировало простейшую форму выражения запроса SELECT:
            </p>
            <p>
                SELECT * FROM `cities` LIMIT 0,30;
            </p>
            <p>
                Звездочка здесь означает "все столбцы". Мы добавили FROM и имя таблицы, в которой будет выполнен запрос на выборку. LIMIT 0,30 означает что выборка начинается с записи номер 0 (самой первой), и содержит максимум 30 записей.
            </p>
            <p>
                Вкладка Search позволяет увидеть большее количество опций для запроса SELECT. Выберем вкладку Search для таблицы cities, и выберем только те столбцы, которые нам нужны. Затем справа от списка столбцов мы выберем порядок сортировки полученной выборки по столбцу `population` по убыванию:
            </p>
            <p>
                В результате phpMyAdmin сгенерирует следующий запрос:
            </p>
            <ul>
                <li>
                    SELECT `city_name` , `population`
                </li>
                <li>
                    FROM `cities`
                </li>
                <li>
                    WHERE 1
                </li>
                <li>
                    ORDER BY `population` DESC LIMIT 0,30;
                </li>
            </ul>
            <p>
                Мы видим, что звездочка была заменена списком столбцов, разделенных запятыми. Условие WHERE 1, добавленное phpMyAdmin-ом, всегда истинно и выбирает все записи. Чуть позже мы увидим, что можно заменить его другим условием. Кроме того, появляется условие ORDER BY , после которого следует название столбца по которому мы хотим сортировать результат выборки, и ключевое слово DESC для сортировки по убыванию (мы могли также использовать ASC для сортировки по возрастанию).
            </p>
            <h5><b>Условия в SQL-запросах</b></h5>
            <p>
                Самым простым способом добавить условие - клик по SQL-query: Edit, на странице результатов, в результате которого будет открыто всплывающее окно "Query". Добавим условие для столбца `country`:
            </p>
            <ul>
                <li>
                    SELECT `city_name` , `population`
                </li>
                <li>
                    FROM `cities`
                </li>
                <li>
                    WHERE country_code = 'zh'
                </li>
                <li>
                    ORDER BY `population` DESC;
                </li>
            </ul>
            <p>
                Это условие выберет все города, находящиеся в Китае. При обозначении условий может быть использовано богатое множество операторов и функций. Вот - два примера:
            </p>
            <p>
                Найти канадские города с численностью населения более 100000:
            </p>
            <p>
                WHERE population > 100000 AND country_code = 'ca';
            </p>
            <p>
                Найти города, чьи названия начинаются с символа "A":
            </p>
            <p>
                WHERE city_name like 'A%'
            </p>
            <h5><b>Функции группировки</b></h5>
            <p>
                Итоговая информация может быть сгенерирована в результате группировки по определенному столбцу. Давайте узнаем среднюю численность городского населения в стране:
            </p>
            <ul>
                <li>
                    SELECT country_code, AVG(population)
                </li>
                <li>
                    FROM cities
                </li>
                <li>
                    GROUP BY country_code
                </li>
            </ul>
            <p>
                Другие возможные функции группировки - MIN(), MAX(), SUM() и COUNT(), которые вычисляют соответственно минимальное значение, максимальное значение, сумму значений, и число записей. Например, с помощью следующего запроса мы можем получить число городов в стране:
            </p>
            <ul>
                <li>
                    SELECT country_code, count(city_name) FROM cities
                </li>
                <li>
                    GROUP BY country_code;
                </li>
            </ul>
            <h5><b>Объединения</b></h5>
            <p>
                Обычно, реляционная база данных включает множество таблиц, связанных общими ключами. Часто возникает необходимость в запросах сразу для нескольких таблиц. Связать, или объединить, таблицы можно с помощью различных методов; мы сосредоточимся на самом простом методе, заключающемся в сравнении ключей.
            </p>
            <p>
                В рассмотренном ниже запросе, условие FROM содержит список названий таблиц, разделенных запятыми. В списке столбцов, мы используем названия таблиц и точку в качестве префикса перед каждым названием столбца (в этом нет необходимости в случае, если все столбцы из одной таблицы).
            </p>
            <ul>
                <li>
                    SELECT cities.city_name, cities.population, countries.country_name
                </li>
                <li>
                    FROM cities, countries
                </li>
                <li>
                    WHERE cities.country_code = countries.country_code LIMIT 0,30
                </li>
            </ul>
            <h5><b>Заключение</b></h5>
            <p>Те элементарные выражения, что были рассмотрены нами здесь не раскрывают полностью возможности SQL. Однако, эта статья поверхностно осветила основы SQL, и показала как использовать phpMyAdmin в качестве инструмента для углубления знаний в SQL.</p>
            <p></p>
            <p></p>
            <p></p>








        </section>
        
    </main>
    
</body>
</html>